version: "3.7"
networks:
  my_network:
    driver: bridge
    ipam:
     config:
       - subnet: 10.10.0.0/16
         gateway: 10.10.0.1

services:
  dnsmasq:
    restart: always
    build:
      context: ../dns
      dockerfile: Dockerfile
    volumes:
      - ../dns/dnsmasq.conf:/etc/dnsmasq.conf
      - ../dns/hosts.prepper:/etc/hosts.prepper
    ports:
      - "5300:53/udp"
    cap_add:
      - NET_ADMIN
    networks:
      my_network:
        ipv4_address: 10.10.1.1

  data-prepper:
    restart: unless-stopped
    container_name: data-prepper
    build:
      context: ../..
      dockerfile: examples/Dockerfile
    working_dir: /app
    command: sh data-prepper-wait-for-odfe-and-start.sh
    volumes:
      - ../data-prepper-wait-for-odfe-and-start.sh:/app/data-prepper-wait-for-odfe-and-start.sh
      - ../trace_analytics_no_ssl.yml:/app/trace_analytics_no_ssl.yml
      - ../demo/root-ca.pem:/app/root-ca.pem
    ports:
      - "21890:21890"
    networks:
      my_network:
        ipv4_address: 10.10.2.1
    depends_on:
      - opendistro-for-elasticsearch

  opendistro-for-elasticsearch:
    container_name: node-0.example.com
    image: 'amazon/opendistro-for-elasticsearch:1.10.1'
    ports:
      - '9200:9200'
      - '9600:9600'
    environment:
      - discovery.type=single-node
    networks:
      - my_network

  kibana:
    build:
      context: ../..
      dockerfile: examples/kibana-trace-analytics/Dockerfile
    container_name: odfe-kibana
    ports:
      - 5601:5601
    expose:
      - "5601"
    environment:
      ELASTICSEARCH_URL: https://node-0.example.com:9200
      ELASTICSEARCH_HOSTS: https://node-0.example.com:9200
    networks:
      - my_network

  otel-collector:
    restart: unless-stopped
    dns: 10.10.1.1
    image: otel/opentelemetry-collector:0.14.0
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./opentelemetry-collector/otel-collector-dns-config.yml:/etc/otel-collector-config.yml
      - ../demo/demo-data-prepper.crt:/etc/demo-data-prepper.crt
    ports:
      - "55680:55680"
    depends_on:
      - data-prepper
    networks:
      - my_network

  mysql:
    restart: unless-stopped
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    networks:
      - my_network

  sample-app:
    restart: unless-stopped
    build:
      context: sample-app
      dockerfile: Dockerfile
    ports:
      - '8082:8082' # inventory
      - '8083:8083' # database
      - '8084:8084' # payment
      - '8085:8085' # auth
      - '8086:8086' # recommendation
      - '8087:8087' # analytics-service
      - '8088:8088' # order
      - '8089:8089' # client-dashboard
    environment:
      - OTEL_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:55680
      - OTEL_RESOURCE_ATTRIBUTES=service.name=analytics-service
      - OTLP=otel-collector
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - WAIT_HOSTS=otel-collector:55680, mysql:3306
    depends_on:
      - otel-collector
      - mysql
    networks:
      - my_network
